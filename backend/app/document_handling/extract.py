from pypdf import PdfReader
import re

def extract_and_clean(file):
    try:
        text = extract_text(file=file)
        text = remove_table_headers(text=text)
        return text
    except Exception as e:
        raise e
    
def extract_text(file: PdfReader):
    try:
        text = ""
        for page in file.pages:
            whole_page = page.extract_text() + "\n"
            end = whole_page.find("Disclaimer")
            text+=whole_page[:end] 
        return text
    except Exception as e:
        raise e
    
def fix_numbers(text):
    '''
    Fix numbers in the format 10000.000.00 to 10000.00 000.00
    '''
    pattern = re.compile(r'\b([\d,]+)\.([\d,]+)\.(\d{2})\b')

    def fix(match):
        left = match.group(1)      # digits with optional commas
        middle = match.group(2)    # variable-length digits/commas
        last = match.group(3)      # two-digit decimal

        # Remove commas from middle to work with pure digits
        middle_digits = middle.replace(',', '')
        
        # First number always gets 2 decimal places from the start of middle
        # Remaining digits from middle become the second number's whole part
        if len(middle_digits) == 1:
            # Only 1 digit in middle, pad with 0 for first number's decimals
            return f"{left}.0{middle_digits} 0.{last}"
        elif len(middle_digits) == 2:
            # Exactly 2 digits, all go to first number's decimals
            return f"{left}.{middle_digits} 0.{last}"
        else:
            # More than 2 digits: first 2 go to first number's decimals, rest to second number's whole part
            first_decimal = middle_digits[:2]  # Take first 2 digits
            second_whole = middle_digits[2:]   # Take remaining digits
            # Add commas back to second number if it's long enough
            if len(second_whole) > 3:
                # Simple comma formatting for thousands
                second_whole = f"{second_whole[:-3]},{second_whole[-3:]}"
            return f"{left}.{first_decimal} {second_whole}.{last}"

    corrected = pattern.sub(fix, text)
    return corrected


# Remove redundant table headers
def remove_table_headers(text):
    '''
    Remove all table headers except the first occurrence
    '''
    start = text.find("Receipt")
    end = text[start:].find("\n") + 1
    if text.find("Receipt No Completion Time Details Transaction StatusPaid in Withdraw\nn\nBalance\n")!= -1:  # for statements generated by the app
        end = text[start:].find(" Withdraw\nn\nBalance") + 1
        text = text[:start + end] + text[start + end:].replace("Receipt No Completion Time Details Transaction StatusPaid in Withdraw\nn\nBalance", "") # for statements generated by the app
        text = text.replace("COMPLETED", "Completed")
        text = fix_numbers(text)
        text = re.sub(r'\bPage\s+\d+\s+of\s+\d+\b', '', text, flags=re.IGNORECASE)
        
    else:
        text = text [:start + end] + text[start + end:].replace("Receipt No. Completion Time Details Transaction Status Paid In Withdrawn Balance ", "")
        
    return text



